classdef StepsDataAnalyzer < mfc.IDescriptor
    % Good at analyzing the rupture events data produced from a batch of
    % F-D curves.
    
    properties
        minimalBins = [];
        binningMethod = [];
        fitR2Threshold = [];
        model = 'gauss';
        modelFittingMode = 'data';
        alpha = 0.05;
    end
    
    methods (Hidden) % factory meta data
        % provides initialization description for mfc.MFactory
        % ctorParams is a cell array which contains the parameters passed to
        % the ctor and which properties are to be set during construction
        function [ctorParams, defaultValues] = getMfcInitializationDescription(~)
            ctorParams = {'binningMethod', 'minimalBins', 'model', 'fitR2Threshold', 'alpha'};
            defaultValues = {...
                'binningMethod', [], ...
                'minimalBins', [],...
                'model', '', ...
                'fitR2Threshold', [], ...
                'alpha', []};
        end
    end
    
    methods
        function this = StepsDataAnalyzer(binningMethod, minimalBins, model, fitR2Threshold, confidenceIntervalAlphaValue)
            this.binningMethod = binningMethod;
            this.minimalBins = minimalBins;
            
            if exist('model', 'var') && ~isempty(model)
                if ~ForSDAT.Core.StepsDataAnalyzer.isModelValid(model)
                    [~, supportedModelsList] = ForSDAT.Core.StepsDataAnalyzer.supportedModels;
                    error(['Specified model ' model ' is invalid. Supported models: '...
                        cell2mat(supportedModelsList)]);
                end
                this.model = model;
            end
            
            if exist('fitR2Threshold', 'var') && ~isempty(fitR2Threshold)
                this.fitR2Threshold = fitR2Threshold;
            end
            
            if exist('confidenceIntervalAlphaValue', 'var') && ~isempty(confidenceIntervalAlphaValue)
                this.alpha = confidenceIntervalAlphaValue;
            end
        end
        
        function [mpf, sigma, err, lr, lrErr, returnedOpts] = doYourThing(this, frc, dist, slope, speed, lrVector, options)
            if ~exist('lrVector', 'var')
                lrVector = [];
            end
            if ~exist('options', 'var')
                options = [];
            end
                        
            % fit multiple gauss peaks
            if startsWith(lower(this.model), 'gauss')
                modelParams = {'PlanBGoodnessThreshold', this.fitR2Threshold};
            else
                modelParams = {'FittingMode', this.modelFittingMode};
            end
            histoolParams = {'Model', this.model, 'ModelParams', modelParams};
            
            % Show histogram if needed
            if ~mvvm.getobj(options, 'showHistogram', false)
                stats = histpac.stats(y, histoolParams);
            else
                stats = this.plotHistogram(y, histoolParams, opt);
            end
            
            % get mpf +/- error
            sigma = stats.StandardDeviation;
            err = util.econfi(stats.MPV, this.alpha, sigma, numel(frc));
            [mpf, err] = util.roundError(stats.MPV, err);
            
            % Calculate the average loading rate & confidence interval
            lrVector = lrVector(~isnan(lrVector));
            if isempty(lrVector)
                lrVector = -1*slope(slope<0)*speed;
            end
            lr = mean(lrVector);
            lrErr = util.econfi(lrVector, this.alpha);
            if isnumeric(lr) && ~isnan(lr) && ~isempty(lr)
                [lr, lrErr] = util.roundError(lr, lrErr);
            end
            
            returnedOpts = struct('fitGoodness', goodness);
        end
        
        function plotHistogram(this, dist, frc, bins, mpf, err, lr, lrErr, pdfs, options)

            % make figure displayable
            xlabel('Rupture Force Range [pN]');
            ylabel('Frequency');
            [displayMPF, displaySTD] = util.roundError(mpf, err);
            plotSubtitle = strcat('MPF=', num2str(displayMPF), '±', num2str(displaySTD), 'pN, L.R=',...
                num2str(lr), '±', num2str(lrErr), 'nN/sec, N=', num2str(length(frc)));

            hold off;

            plotTitle = mvvm.getobj(options, 'title', '');
            if iscell(plotTitle)
                plotTitle{length(plotTitle) + 1} = plotSubtitle;
            elseif ~isempty(plotTitle)
                plotTitle = {plotTitle, plotSubtitle};
            else
                plotTitle = plotSubtitle;
            end
            title(plotTitle);
        end
    end
end


if ~exist('lastFolderPath', 'var') || isempty(lastFolderPath)
    lastFolderPath = [pwd '\..\Reches Lab Share\TADA\'];
end

% Choose batch folder
folderPath = uigetdir(lastFolderPath, 'Open JPK F-D Curve Batch');

if isempty(folderPath) || (length(folderPath) == 1 && folderPath == 0)
    disp('You really should choose a folder...');
    return;
end

startTime = datestr(now, 'YYYY-mm-dd.HH.MM.SS.FFF');
temporaryReportPath = [folderPath '\temp_report_' startTime '.xml'];
reportData = Simple.List(10, struct(...
    'batchPath', '',...
    'analyzedStepsCount', 0, ...
    'successfullInteractionRate', 0,...  
    'mpf', [], ...
    'mpfStd', [], ...
    'lr', [], ...
    'remark', '',...
    'error', ''));
lastFolderPath = folderPath;
batches = findAllBatchesForAnalyzisRecursive(folderPath);
batchesNum = length(batches);
if ~exist('ignoreTheseBatches', 'var')
    ignoreTheseBatches = {};
end

for i = 1:batchesNum
    currBatch = batches{i};
    
    % if should ignore current batch, go on to the next one
    if any(find(ismember(ignoreTheseBatches, currBatch)))
        continue;
    end
    
    try
        [analyzedStepsCount, mpf, mpfSTD, lr] = MainSMFSDA.analyzeFDCurveBatch(...
            currBatch, ...
            [currBatch '\forceBatchSettings.xml'], ...
            false, false, ['batch #' num2str(i) '/' num2str(batchesNum)]);
        
        curvesCount = length(dir([currBatch '\*.txt']));
        reportData.add(struct(...
            'batchPath', currBatch,...
            'analyzedStepsCount', analyzedStepsCount,...
            'successfullInteractionRate', analyzedStepsCount / curvesCount * 100,...
            'mpf', mpf,...
            'mpfStd', mpfSTD,...
            'lr', lr,...
            'remark', 'Analysis was successful.',...
            'error', ''));
    catch ex
        errorMSG = getReport(ex);
        display(errorMSG);
        reportData.add(struct(...
            'batchPath', currBatch,...
            'analyzedStepsCount', 0,...
            'successfullInteractionRate', 0,...
            'mpf', [],...
            'mpfStd', [],...
            'lr', [],...
            'remark', 'Analysis failed.',...
            'error', errorMSG));
    end
    
    try
        Simple.IO.MXML.save(temporaryReportPath, reportData.vector());
    catch ex
        display(getReport(ex));
    end
end

endTime = datestr(now, 'YYYY-mm-dd.HH.MM.SS.FFF');
reportPath = [folderPath '\report_' endTime '.xml'];
Simple.IO.MXML.save(reportPath, reportData.vector());
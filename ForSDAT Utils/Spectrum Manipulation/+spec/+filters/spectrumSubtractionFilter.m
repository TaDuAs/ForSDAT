function filter = spectrumSubtractionFilter(subtractSignal, FsSubtractSignal, cutoffFreq)
% spectrumSubtractionFilter generates a filter function that subtracts a 
% the spectrum of a given signal from the signal passed in during
% filtration.
% 
% filter = spectrumSubtractionFilter(filterFunction)
%   generates a spectrum subtraction filter which subtracts the spectrum of
%   the signal generated by the given filterFunction
% Input:
% filterFunction - A filter function with the signature
%                  function fixedSignal = filter(x, y)
% Output:
% filter -  A filter function handle with the expected signature:
%           function fixedSignal = foo(x, y, model)
% 
%
% filter = spectrumSubtractionFilter(filterFunction, [], cutoffFreq)
%   Also takes in a cutof frequency to stop filtering above (sort of like a
%   high pass filter)
% Input:
% filterFunction - A filter function with the signature
%                  function fixedSignal = filter(x, y)
% cutoffFreq     - The filter will be applied below this cutoff frequency
% 
%
% filter = spectrumSubtractionFilter(subtractSignal, FsSubtractSignal)
%   generates a spectrum subtraction filter which subtracts the spectrum of
%   the specified signal
% Input:
% subtractSignal - A signal whose spectrum should be subtracted from the
%                  signal passed in during filtration.
% FsSubtractSignal - The sampling frequency of the specified signal.
% Output:
% filter -  A filter function handle with the expected signature:
%           function fixedSignal = foo(x, y, model)
% 
%
% filter = spectrumSubtractionFilter(subtractSignal, FsSubtractSignal, cutoffFreq)
%   Also takes in a cutof frequency to stop filtering above (sort of like a
%   high pass filter)
% Input:
% subtractSignal - A signal whose spectrum should be subtracted from the
%                  signal passed in during filtration.
% FsSubtractSignal - The sampling frequency of the specified signal.
% cutoffFreq     - The filter will be applied below this cutoff frequency
%
% Written by TADA, HUJI 2020.
%
% see also:
% spec.filterSpectrum
% spec.filters.backgroundFilter
% spec.filters.subtractionFilter
% spec.filters.reductionFilter
% spec.filters.bandPassFilter
% spec.filters.bandRejectFilter
% spec.filters.bandIntensityFilter
%
    if nargin < 3; cutoffFreq = []; end
    assert(isempty(cutoffFreq) || (isscalar(cutoffFreq) && cutoffFreq > 0), 'Cutoff frequency must be a positive numeric scalar');
    
    function [ampSpec, fh] = getSubtractSpectrumFromFilter(x, y)
        [ampSpec, fh] = ampSpecFromFFT(x, subtractSignal(x, y));
    end

    function [ampSpec, fh] = getSubtractSpectrumFromSignal(~, ~)
        [ampSpec, fh] = ampSpecFromSignal(subtractSignal, FsSubtractSignal);
    end
    
    %
    % generate the subtraction spectrum generating function handle
    % the use of a closure maintains the current workspace alive untill the
    % closure is ready to be used
    % 
    if isnumeric(subtractSignal)
        % if the signal was an actual signal, as in numeric values, use the
        % ampSpecFromSignal function which uses spec.spectrum for this
        % purpose
        getSubtractionSpectrum = @getSubtractSpectrumFromSignal;
    else
        % ensure the validity of the fiter function
        spec.filters.validateFilterFunction(subtractSignal, 2, 'subtractSignal must be either a signal to subtract at fourier space, or a filter function which generates the spectrum to subtract with the signature: function fixedSignal = filter(x, y)');
        
        % if the subtraction signal is given as a filter function, use the 
        % getSubtractSpectrumFromFilter function which generates an
        % amplitude spectrum from a given fourier space signal
        getSubtractionSpectrum = @getSubtractSpectrumFromFilter;
    end
        
    % The 
    function fixedSignal = spectrumSubtractFilterFunction(x, y, ~)
        % get amplitude spectrum of the current fft values
        [ampSpec, fh, N, Nf] = ampSpecFromFFT(x, y);
        
        % get the amplitude spectrum of the subtraction signal
        [subAmpSpec, subFh] = getSubtractionSpectrum(x, y);
        
        % stretch the subtraction amplitude spectrum to fit the size of the
        % current amplitude spectrum
        subAmpSpecInterp = interp1(subFh, subAmpSpec, fh);
        
        if ~isempty(cutoffFreq)
            cutoffIdxPos = find(fh > cutoffFreq, 1, 'first');
            cutoffIdxNeg = min(Nf-2, cutoffIdxPos);
        else
            cutoffIdxPos = Nf;
            cutoffIdxNeg = Nf-2;
        end
        
        % calculate the relative fraction of the subtracted signal for each 
        % frequency 
        relativeSpectralValues = (ampSpec - subAmpSpecInterp)./ampSpec;
        relativeSpectralValues(relativeSpectralValues < 0) = 0;
        
        % apply intensity reduction filter according to the relative
        % amplitudes of all frequencies
        fixedSignal = y;
        idxPos = 1:cutoffIdxPos;
        idxNeg = N-cutoffIdxNeg+1:N;
        
        % The positive part is easy, simply multiply each value by the 
        % relative multiplier at the same index
        % The negative part is a bit tricky...
        % first of all, need to take them from the end, and not from
        % Nfastest onwards. second, we need to multiply by the same
        % relative multipliers, but we need to flip them to account for the
        % fliped order of the frequencies in the negative part,
        % Finaly, need to take only as many elements from the relative
        % multipliers as there are elements in the negative frequencies
        fixedSignal(idxPos) = fixedSignal(idxPos) .* relativeSpectralValues(idxPos);
        fixedSignal(idxNeg) = fixedSignal(idxNeg) .* flip(relativeSpectralValues(2:numel(idxNeg)+1));
    end
    
    filter = @spectrumSubtractFilterFunction;
end


function [ampSpec, fh] = ampSpecFromSignal(subtractSignal, FsSubtractSignal)
% generates the amplitude spectrum of a signal
    [ampSpec, fh] = spec.spectrum(subtractSignal, FsSubtractSignal);
    ampSpec = ampSpec(:);
    fh = fh(:);
end

function [ampSpec, fh, N, Nf] = ampSpecFromFFT(x, y)
% generates the amplitude spectrum of a signal in fourier space
    N = numel(y);
    Nf = spec.findNFastest(N);
    ampSpec = spec.fft2ampSpec(y, N, Nf) ;
    fh = x(1:Nf);
end